name: Release

on:
  push:
    branches: [devel,master]
    tags: '*'
  pull_request:
    branches: [devel,master]

jobs:
  build-bin:
    name: Build binary
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.20'
      - name: Build binary
        run: |
          cd cvmfs-csi
          make build-cross
      - name: Archive binaries
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: bin
          path: cvmfs-csi/bin

  build-image:
    name: Build image
    needs: build-bin
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Cosign
        uses: sigstore/cosign-installer@v3.4.0

      - name: Login to Registry
        if: ${{ startsWith(github.ref, 'refs/tags/v') }}
        uses: docker/login-action@v3
        with:
          registry: registry.cern.ch
          username: ${{ secrets.REGISTRY_USERNAME  }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: Download binaries
        uses: actions/download-artifact@v4
        with:
          name: bin
          path: cvmfs-csi/bin

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract metadata
        id: docker_meta
        uses: docker/metadata-action@v4.4.0
        with:
          images: cvmfs-csi/cvmfs-csi
          tags: ${{ github.ref_name || github.sha }}

      - name: Build and push container images
        uses: docker/build-push-action@v2
        id: build-and-push
        with:
          context: cvmfs-csi
          file:  cvmfs-csi/deployments/docker/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: ${{ startsWith(github.ref, 'refs/tags/v') }}
          tags: ${{ steps.docker_meta.outputs.tags }}
          build-args: RELEASE=${{ github.ref_name || github.sha }} GITREF=${{ github.sha }} CREATED=${{ github.event.created_at }}

      - name: Sign image
        if: ${{ startsWith(github.ref, 'refs/tags/v') }}
        run: |
          images=""
          for tag in ${TAGS}; do
            images+="${tag}@${DIGEST} "
          done
          cosign sign --yes --key env://COSIGN_PRIVATE_KEY ${images}
        env:
          TAGS: ${{ steps.docker_meta.outputs.tags }}
          COSIGN_PRIVATE_KEY: ${{ secrets.COSIGN_PRIVATE_KEY }}
          COSIGN_PASSWORD: ${{ secrets.COSIGN_PASSWORD }}
          DIGEST: ${{ steps.build-and-push.outputs.digest }}

      - name: Scan image
        if: startsWith(github.ref, 'refs/tags/v')
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ steps.docker_meta.outputs.tags }}

  build-chart:
    name: Build chart
    runs-on: ubuntu-latest
    env:
      REGISTRY_CHART_PATH: registry.cern.ch/cvmfs-csi/charts
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Helm
        uses: azure/setup-helm@v3

      - name: Install Cosign
        uses: sigstore/cosign-installer@v3.4.0

      - name: Push chart
        id: push_chart
        uses: bsord/helm-push@v4.1.0
        if: ${{ startsWith(github.ref, 'refs/tags/v') }}
        with:
          useOCIRegistry: true
          registry-url: 'oci://${{ env.REGISTRY_CHART_PATH }}'
          username: ${{ secrets.REGISTRY_USERNAME }}
          access-token: ${{ secrets.REGISTRY_PASSWORD }} # access token = password (for robots on harbor)
          force: true
          chart-folder: cvmfs-csi/deployments/helm/cvmfs-csi

      - name: Sign chart
        if: ${{ startsWith(github.ref, 'refs/tags/v') }}
        run: |
          images=""
          for tag in ${TAGS}; do
            images+="${tag}@${DIGEST} "
          done
          cosign sign --yes --key env://COSIGN_PRIVATE_KEY ${images}
        env:
          COSIGN_PRIVATE_KEY: ${{ secrets.COSIGN_PRIVATE_KEY }}
          COSIGN_PASSWORD: ${{ secrets.COSIGN_PASSWORD }}

      - name: Scan chart
        if: startsWith(github.ref, 'refs/tags/v')
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ steps.docker_meta.outputs.tags }}
