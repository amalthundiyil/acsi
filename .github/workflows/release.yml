name: Release

on:
  push:
    branches: [devel,master]
    tags: '*'
  pull_request:
    branches: [devel,master]

jobs:
  build-bin:
    name: "Build binary"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.20'
      - name: Build binary
        run: |
          cd cvmfs-csi
          make build-cross
      - name: Archive binaries
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: bin
          path: cvmfs-csi/bin

  build-image:
    name: Build image
    needs: build-bin
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Cosign
        uses: sigstore/cosign-installer@v3.4.0

      - name: Login to Registry
        if: ${{ startsWith(github.ref, 'refs/tags/v') }}
        uses: docker/login-action@v3
        with:
          registry: docker.io
          username: ${{ secrets.HARBOR_USERNAME  }}
          password: ${{ secrets.HARBOR_PASSWORD }}

      - name: Download binaries
        uses: actions/download-artifact@v4
        with:
          name: bin
          path: cvmfs-csi/bin

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract metadata
        id: docker_meta
        uses: docker/metadata-action@v4.4.0
        with:
          images: amalthundiyil/cvmfs-csi
          tags: ${{ github.ref_name || github.sha }}

      - name: Build and push container images
        uses: docker/build-push-action@v2
        id: build-and-push
        with:
          context: cvmfs-csi
          file:  cvmfs-csi/deployments/docker/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: ${{ startsWith(github.ref, 'refs/tags/v') }}
          tags: ${{ steps.docker_meta.outputs.tags }}
          build-args: RELEASE=${{ github.ref_name || github.sha }} GITREF=${{ github.sha }} CREATED=${{ github.event.created_at }}

      - name: Sign image
        if: ${{ startsWith(github.ref, 'refs/tags/v') }}
        run: |
          images=""
          for tag in ${TAGS}; do
            images+="${tag}@${DIGEST} "
          done
          cosign sign --yes --key env://COSIGN_PRIVATE_KEY ${images}
        env:
          TAGS: ${{ steps.docker_meta.outputs.tags }}
          COSIGN_PRIVATE_KEY: ${{ secrets.COSIGN_PRIVATE_KEY }}
          COSIGN_PASSWORD: ${{ secrets.COSIGN_PASSWORD }}
          DIGEST: ${{ steps.build-and-push.outputs.digest }}

      - name: Scan image
        if: startsWith(github.ref, 'refs/tags/v')
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ steps.docker_meta.outputs.tags }}

  build-chart:
    name: "Build chart"
    runs-on: ubuntu-latest
    env:
      REGISTRY_CHART_PATH: amalthundiyil/charts
      REGISTRY: docker.io
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Helm
        uses: azure/setup-helm@v3

      - name: Install Cosign
        uses: sigstore/cosign-installer@v3.4.0

      - name: Log in to Registry
        run: echo "${{ secrets.HARBOR_PASSWORD }}" | helm registry login ${{ env.REGISTRY }} -u ${{ secrets.HARBOR_USERNAME }} --password-stdin

      - name: Extract metadata
        id: docker_meta
        uses: docker/metadata-action@v4.4.0
        with:
          images: ${{ env.REGISTRY_CHART_PATH }}
          tags: ${{ github.ref_name || github.sha }}

      # - name: Add Helm repositories
      #   run: |
      #     helm repo add cern https://${REGISTRY}/chartrepo/cern
      #     helm repo add stable https://${REGISTRY}/chartrepo/stable
      #     helm repo add $(basename ${REGISTRY_PATH}) "https://${REGISTRY_PATH}" --force-update
      #     helm repo update

      - name: Find charts in directory tree
        run: |
          ALL_CHARTS=$(find "$PWD" -type f -iname "Chart.yaml" -not -path '*/\.git/*' | xargs dirname)
          CHART_ROOT_FOLDERS=${ALL_CHARTS}
          for each in $ALL_CHARTS; do
            CHART_ROOT_FOLDERS=$(echo $CHART_ROOT_FOLDERS | sed -E -e "s#$each\/charts\/\S+##g")
          done

      - name: Release charts
        env: 
          PUSH_CHART: ${{ startsWith(github.ref, 'refs/tags/v') }}
        run: |
          for chart in ${CHART_ROOT_FOLDERS}; do
            cd $chart
            CHART_NAME=$(grep '^name:' Chart.yaml | awk '{print $2}')
            LOCAL_VERSION=$(grep '^version:' Chart.yaml | awk '{print $2}')
            helm dep update .

            for managed_chart in $(ls charts/ | grep -v ".tgz"); do
              ls charts/${managed_chart}* | grep -E "$managed_chart-[0-9]+.[0-9]+.[0-9]+.tgz$" | xargs rm $1 -f
            done

            helm lint .

            if REMOTE_VERSION=$(helm search repo $(basename ${REGISTRY_PATH})/$CHART_NAME --version ${LOCAL_VERSION} | grep $(basename ${REGISTRY_PATH})/$CHART_NAME); then
              echo "INFO: $(basename ${REGISTRY_PATH})/$CHART_NAME:${LOCAL_VERSION} chart already exists in remote."
            else
              REMOTE_VERSION=""
            fi

            if [ -n "$REGISTRY_SIGNKEY" ]; then
              echo "${REGISTRY_SIGNKEY}" | base64 -d > secring.gpg
              helm package --sign --key registry --keyring secring.gpg .

              if $PUSH_CHART && [ "$REMOTE_VERSION" == "" ]; then
                echo "INFO: will push ${CHART_NAME}-${LOCAL_VERSION}.tgz and ${CHART_NAME}-${LOCAL_VERSION}.tgz.prov"
                set +x
                curl --fail -F "chart=@${CHART_NAME}-${LOCAL_VERSION}.tgz" -F "prov=@${CHART_NAME}-${LOCAL_VERSION}.tgz.prov" -H "authorization: Basic $(echo -n ${REGISTRY_USER}:${REGISTRY_PASSWORD} | base64 -w 0)" https://${REGISTRY}/api/chartrepo/$(basename ${REGISTRY_PATH})/charts
                set -x
              else
                echo "INFO: will not push ${CHART_NAME}-${LOCAL_VERSION}.tgz"
              fi
            else
              helm package .

              if $PUSH_CHART && [ "$REMOTE_VERSION" == "" ]; then
                echo "INFO: will push ${CHART_NAME}-${LOCAL_VERSION}.tgz"
                helm push ${CHART_NAME}-${LOCAL_VERSION}.tgz oci://${REGISTRY_CHART_PATH}
                set +x
                curl --fail -F "chart=@${CHART_NAME}-${LOCAL_VERSION}.tgz" -H "authorization: Basic $(echo -n ${REGISTRY_USER}:${REGISTRY_PASSWORD} | base64 -w 0)" https://${REGISTRY}/api/chartrepo/$(basename ${REGISTRY_PATH})/charts
                set -x
              else
                echo "INFO: will not push ${CHART_NAME}-${LOCAL_VERSION}.tgz"
              fi
            fi
          done

      - name: Sign image
        if: ${{ startsWith(github.ref, 'refs/tags/v') }}
        run: |
          images=""
          for tag in ${TAGS}; do
            images+="${tag}@${DIGEST} "
          done
          cosign sign --yes --key env://COSIGN_PRIVATE_KEY ${images}
        env:
          TAGS: ${{ steps.docker_meta.outputs.tags }}
          COSIGN_PRIVATE_KEY: ${{ secrets.COSIGN_PRIVATE_KEY }}
          COSIGN_PASSWORD: ${{ secrets.COSIGN_PASSWORD }}
          DIGEST: ${{ github.sha }}

      - name: Scan image
        if: startsWith(github.ref, 'refs/tags/v')
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ steps.docker_meta.outputs.tags }}
